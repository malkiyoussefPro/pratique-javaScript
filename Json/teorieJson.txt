# JSON: دليل تفصيلي

## ما هو JSON؟
JSON (JavaScript Object Notation) هو تنسيق لتبادل البيانات يعتمد على النصوص. يتم استخدامه بشكل واسع لتخزين ونقل البيانات بين الخادم (server) والمتصفح (client). JSON يتميز بأنه:

- بسيط وسهل القراءة.
- مدعوم من جميع لغات البرمجة الحديثة.
- أصغر حجمًا مقارنةً بتنسيقات أخرى مثل XML.

### مثال على كائن JSON:
```json
{
  "name": "Youssef",
  "age": 30,
  "job": "Developer",
  "skills": ["JavaScript", "HTML", "CSS"]
}
```

## مكونات JSON
1. **كائنات (Objects):**
   - تمثل البيانات في شكل أزواج من المفاتيح والقيم (key-value pairs).
   - المفاتيح يجب أن تكون نصوصًا (Strings).
   - القيم يمكن أن تكون: نصوصًا، أرقامًا، مصفوفات، كائنات أخرى، قيم منطقية (true/false)، أو null.

   **مثال:**
   ```json
   {
     "name": "Ali",
     "age": 25
   }
   ```

2. **مصفوفات (Arrays):**
   - تحتوي على قائمة مرتبة من القيم.
   - يمكن أن تحتوي على أنواع مختلفة من البيانات.

   **مثال:**
   ```json
   ["JavaScript", "Python", "Ruby"]
   ```

3. **قيم أساسية:**
   - نصوص (Strings): مثل "Hello World".
   - أرقام (Numbers): مثل 42 أو 3.14.
   - منطقية (Booleans): true أو false.
   - Null: تعني القيمة الفارغة.

---

## متى نستخدم JSON؟

### 1. **نقل البيانات بين الخادم والمتصفح:**
   - يتم استخدام JSON في واجهات برمجة التطبيقات (APIs) لنقل البيانات بين العميل والخادم.
   
   **مثال:**
   - طلب بيانات مستخدم معين:
     ```javascript
     fetch('/api/user/1')
       .then(response => response.json())
       .then(data => console.log(data));
     ```

### 2. **تخزين البيانات محليًا في المتصفح:**
   - يمكن استخدام JSON مع `localStorage` أو `sessionStorage` لتخزين بيانات المستخدم.
   
   **مثال:**
   ```javascript
   const user = {
     name: "Youssef",
     age: 30
   };

   // تخزين البيانات
   localStorage.setItem('user', JSON.stringify(user));

   // استرجاع البيانات
   const storedUser = JSON.parse(localStorage.getItem('user'));
   console.log(storedUser.name); // "Youssef"
   ```

### 3. **تنظيم البيانات في المشاريع:**
   - JSON يُستخدم لتخزين إعدادات التطبيقات أو البيانات المؤقتة.

   **مثال:**
   - ملف إعدادات:
     ```json
     {
       "theme": "dark",
       "language": "ar",
       "notifications": true
     }
     ```

### 4. **إنشاء ملفات قابلة للتبادل:**
   - JSON يُستخدم لتبادل البيانات بين الأنظمة المختلفة.

   **مثال:**
   - ملف بيانات مستخدم:
     ```json
     {
       "users": [
         { "id": 1, "name": "Ali" },
         { "id": 2, "name": "Sara" }
       ]
     }
     ```

---

## أدوات JSON الأساسية في JavaScript

### **`JSON.stringify()`**
- تُستخدم لتحويل كائنات JavaScript إلى نص JSON.

**الاستخدامات:**
1. إرسال البيانات إلى الخادم.
2. تخزين البيانات في `localStorage` أو `sessionStorage`.

**مثال:**
```javascript
const user = {
  name: "Youssef",
  age: 30
};

const jsonString = JSON.stringify(user);
console.log(jsonString); // "{\"name\":\"Youssef\",\"age\":30}"
```

### **`JSON.parse()`**
- تُستخدم لتحويل نص JSON إلى كائن JavaScript.

**الاستخدامات:**
1. استرجاع البيانات من `localStorage` أو `sessionStorage`.
2. قراءة البيانات المستلمة من واجهة برمجة التطبيقات (API).

**مثال:**
```javascript
const jsonString = '{"name":"Youssef","age":30}';
const user = JSON.parse(jsonString);
console.log(user.name); // "Youssef"
```

---

## أمثلة عملية

### **مثال 1: نقل البيانات بين العميل والخادم**

**العميل:**
```javascript
const user = {
  name: "Ali",
  email: "ali@example.com"
};

fetch('/api/register', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json'
  },
  body: JSON.stringify(user)
});
```

**الخادم (Node.js):**
```javascript
app.post('/api/register', (req, res) => {
  const user = req.body;
  console.log(user.name); // "Ali"
  res.send("User registered");
});
```

### **مثال 2: تخزين الإعدادات محليًا**

```javascript
const settings = {
  theme: "dark",
  language: "en"
};

// تخزين الإعدادات
localStorage.setItem('settings', JSON.stringify(settings));

// استرجاع الإعدادات
const storedSettings = JSON.parse(localStorage.getItem('settings'));
console.log(storedSettings.theme); // "dark"
```

### **مثال 3: قراءة ملف JSON**

**ملف JSON (data.json):**
```json
{
  "products": [
    { "id": 1, "name": "Laptop", "price": 1000 },
    { "id": 2, "name": "Phone", "price": 500 }
  ]
}
```

**JavaScript:**
```javascript
fetch('data.json')
  .then(response => response.json())
  .then(data => {
    data.products.forEach(product => {
      console.log(product.name);
    });
  });
```

---

## نصائح وملاحظات

1. **التأكد من صحة JSON:**
   - استخدم أدوات مثل [JSONLint](https://jsonlint.com/) للتحقق من صحة النصوص.

2. **الحذر مع النصوص الكبيرة:**
   - إذا كان النص JSON كبيرًا جدًا، قد يؤدي ذلك إلى استهلاك كبير للذاكرة.

3. **التعامل مع الأخطاء:**
   - عند استخدام `JSON.parse()`, تأكد من أن النص الذي تحلله صحيح.

   **مثال:**
   ```javascript
   try {
     const data = JSON.parse(invalidJsonString);
   } catch (error) {
     console.error("Invalid JSON format", error);
   }
   ```

---

## الخاتمة
JSON هو أداة قوية لتبادل البيانات بين الأنظمة. باستخدام `JSON.stringify()` و `JSON.parse()`, يمكنك بسهولة تحويل البيانات بين النصوص والكائنات لتلبية احتياجات مشاريعك. تطبيق JSON بشكل صحيح سيجعل تطبيقاتك أكثر كفاءة وسهولة في الصيانة.

